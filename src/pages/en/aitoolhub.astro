---
import Layout from '../../layouts/Layout.astro';
import { getLangFromUrl, useTranslations } from '../../utils/i18n';
import { getAITools } from '../../utils/airtable';

const lang = 'en';
const t = useTranslations(lang);

const tools = await getAITools();
const categories = [...new Set(tools.flatMap(tool => tool.fields['Danh mục'] || []))];

const title = t('toolhub.page_title');
const description = 'Discover and compare the best AI tools carefully curated. Find the perfect AI tool for all your needs.';

// Group tools by category
const toolsByCategory = categories.reduce((acc, category) => {
  acc[category] = tools.filter(tool => tool.fields['Danh mục']?.includes(category));
  return acc;
}, {} as Record<string, typeof tools>);
---

<Layout title={title} description={description}>
  <!-- Hero Section -->
  <section class="bg-white py-16">
    <div class="container mx-auto px-4 text-center">
      <h1 class="text-4xl md:text-5xl font-poppins font-bold text-neutral-900 mb-4">
        Discover and compare the best AI tools
      </h1>
      <p class="text-xl text-neutral-600 mb-8 max-w-3xl mx-auto">
        {description}
      </p>
      
      <!-- Search and Filter Section -->
      <div class="max-w-4xl mx-auto mb-12">
        <div class="flex flex-col md:flex-row gap-4 items-center justify-between">
          <!-- Search Bar -->
          <div class="relative flex-1 max-w-md">
            <input 
              type="text" 
              placeholder="Search tools..."
              class="w-full px-4 py-3 pl-12 border border-neutral-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-primary-500 focus:border-primary-500"
              id="search-input"
            />
            <svg class="absolute left-4 top-3.5 w-5 h-5 text-neutral-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"></path>
            </svg>
          </div>

          <!-- Category Filter Dropdown -->
          <div class="relative">
            <button 
              id="category-dropdown-btn"
              class="flex items-center justify-between w-48 px-4 py-3 bg-white border border-neutral-300 rounded-lg hover:bg-neutral-50 focus:outline-none focus:ring-2 focus:ring-primary-500"
            >
              <span id="selected-category">All categories</span>
              <svg class="w-5 h-5 text-neutral-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7"></path>
              </svg>
            </button>
            
            <div id="category-dropdown" class="hidden absolute top-full left-0 w-full mt-1 bg-white border border-neutral-200 rounded-lg shadow-lg z-10">
              <div class="py-1">
                <button class="category-option w-full text-left px-4 py-2 hover:bg-neutral-50" data-category="all">
                  All categories
                </button>
                {categories.map((category) => (
                  <button class="category-option w-full text-left px-4 py-2 hover:bg-neutral-50" data-category={category}>
                    {category}
                  </button>
                ))}
              </div>
            </div>
          </div>

          <!-- Sort Dropdown -->
          <div class="relative">
            <select 
              id="sort-select"
              class="px-4 py-3 border border-neutral-300 rounded-lg bg-white focus:outline-none focus:ring-2 focus:ring-primary-500"
            >
              <option value="name">All</option>
              <option value="rating">Highest rated</option>
              <option value="popular">Most popular</option>
            </select>
          </div>
        </div>
      </div>
    </div>
  </section>

  <!-- Tools by Category -->
  <section class="py-8 bg-neutral-50">
    <div class="container mx-auto px-4">
      <!-- All Tools View (Default) -->
      <div id="all-tools-view">
        <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8" id="tools-grid">
          {tools.map((tool) => (
            <div class="ai-tool bg-white rounded-xl shadow-md hover:shadow-lg transition-all duration-300 transform hover:scale-105 overflow-hidden" 
                 data-categories={JSON.stringify(tool.fields['Danh mục'] || [])}
                 data-rating={tool.fields['Rating (Sao)'] || 0}
                 data-popular={tool.fields['Phổ biến'] || false}
                 data-name={tool.fields['Tên công cụ (EN)']}
            >
              <!-- Tool Image -->
              <div class="relative h-48 overflow-hidden">
                {tool.fields['Logo công cụ'] && tool.fields['Logo công cụ'][0] ? (
                  <img 
                    src={tool.fields['Logo công cụ'][0].url} 
                    alt={tool.fields['Tên công cụ (EN)']}
                    class="w-full h-full object-cover"
                  />
                ) : (
                  <div class="w-full h-full bg-gradient-to-br from-primary-500 to-accent-500 flex items-center justify-center">
                    <span class="text-white text-2xl font-bold">AI</span>
                  </div>
                )}
                
                <!-- Price Badge -->
                {tool.fields['Trạng thái giá'] && (
                  <div class="absolute top-4 left-4">
                    <span class={`px-3 py-1 rounded-full text-sm font-medium ${
                      tool.fields['Trạng thái giá'] === 'Miễn phí' || tool.fields['Trạng thái giá'] === 'Free' 
                        ? 'bg-green-500 text-white' 
                        : tool.fields['Trạng thái giá'] === 'Có dùng thử' || tool.fields['Trạng thái giá'] === 'Free Trial'
                        ? 'bg-blue-500 text-white'
                        : 'bg-purple-500 text-white'
                    }`}>
                      {tool.fields['Trạng thái giá']}
                    </span>
                  </div>
                )}

                <!-- Rating -->
                {tool.fields['Rating (Sao)'] && (
                  <div class="absolute top-4 right-4 bg-white bg-opacity-90 px-2 py-1 rounded-full flex items-center">
                    <svg class="w-4 h-4 text-yellow-400 mr-1" fill="currentColor" viewBox="0 0 20 20">
                      <path d="M9.049 2.927c.3-.921 1.603-.921 1.902 0l1.07 3.292a1 1 0 00.95.69h3.462c.969 0 1.371 1.24.588 1.81l-2.8 2.034a1 1 0 00-.364 1.118l1.07 3.292c.3.921-.755 1.688-1.54 1.118l-2.8-2.034a1 1 0 00-1.175 0l-2.8 2.034c-.784.57-1.838-.197-1.539-1.118l1.07-3.292a1 1 0 00-.364-1.118L2.98 8.72c-.783-.57-.38-1.81.588-1.81h3.461a1 1 0 00.951-.69l1.07-3.292z" />
                    </svg>
                    <span class="text-sm font-medium text-neutral-700">{tool.fields['Rating (Sao)']}</span>
                  </div>
                )}
              </div>

              <!-- Tool Content -->
              <div class="p-6">
                <!-- Tool Name -->
                <h3 class="text-xl font-bold text-neutral-900 mb-2">
                  {tool.fields['Tên công cụ (EN)']}
                </h3>

                <!-- Description -->
                <p class="text-neutral-600 text-sm mb-4 line-clamp-2">
                  {tool.fields['Mô tả ngắn gọn (EN)']}
                </p>

                <!-- Category -->
                <div class="mb-4">
                  <span class="text-sm text-neutral-500">
                    {tool.fields['Danh mục'] && tool.fields['Danh mục'][0]}
                  </span>
                </div>

                <!-- Tags -->
                <div class="flex flex-wrap gap-2 mb-4">
                  {tool.fields['Danh mục'] && tool.fields['Danh mục'].slice(0, 2).map((tag) => (
                    <span class="bg-neutral-100 text-neutral-700 text-xs px-2 py-1 rounded">
                      {tag}
                    </span>
                  ))}
                </div>

                <!-- CTA Button -->
                <a 
                  href={tool.fields['Link Affiliate']} 
                  target="_blank" 
                  rel="noopener noreferrer"
                  class="w-full inline-flex items-center justify-center bg-primary-600 hover:bg-primary-700 text-white px-4 py-3 rounded-lg font-semibold transition-colors"
                >
                  Try Now
                  <svg class="w-4 h-4 ml-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 6H6a2 2 0 00-2 2v10a2 2 0 002 2h10a2 2 0 002-2v-4M14 4h6m0 0v6m0-6L10 14"></path>
                  </svg>
                </a>
              </div>
            </div>
          ))}
        </div>
      </div>

      <!-- Category Views -->
      {Object.entries(toolsByCategory).map(([category, categoryTools]) => (
        <div id={`category-${category.replace(/\s+/g, '-').toLowerCase()}`} class="category-view hidden">
          <div class="mb-8">
            <h2 class="text-3xl font-bold text-neutral-900 mb-2">{category}</h2>
            <p class="text-neutral-600">{categoryTools.length} tools</p>
          </div>
          
          <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8">
            {categoryTools.map((tool) => (
              <div class="ai-tool bg-white rounded-xl shadow-md hover:shadow-lg transition-all duration-300 transform hover:scale-105 overflow-hidden">
                <!-- Same tool card structure as above -->
                <div class="relative h-48 overflow-hidden">
                  {tool.fields['Logo công cụ'] && tool.fields['Logo công cụ'][0] ? (
                    <img 
                      src={tool.fields['Logo công cụ'][0].url} 
                      alt={tool.fields['Tên công cụ (EN)']}
                      class="w-full h-full object-cover"
                    />
                  ) : (
                    <div class="w-full h-full bg-gradient-to-br from-primary-500 to-accent-500 flex items-center justify-center">
                      <span class="text-white text-2xl font-bold">AI</span>
                    </div>
                  )}
                  
                  {tool.fields['Trạng thái giá'] && (
                    <div class="absolute top-4 left-4">
                      <span class={`px-3 py-1 rounded-full text-sm font-medium ${
                        tool.fields['Trạng thái giá'] === 'Miễn phí' || tool.fields['Trạng thái giá'] === 'Free' 
                          ? 'bg-green-500 text-white' 
                          : tool.fields['Trạng thái giá'] === 'Có dùng thử' || tool.fields['Trạng thái giá'] === 'Free Trial'
                          ? 'bg-blue-500 text-white'
                          : 'bg-purple-500 text-white'
                      }`}>
                        {tool.fields['Trạng thái giá']}
                      </span>
                    </div>
                  )}

                  {tool.fields['Rating (Sao)'] && (
                    <div class="absolute top-4 right-4 bg-white bg-opacity-90 px-2 py-1 rounded-full flex items-center">
                      <svg class="w-4 h-4 text-yellow-400 mr-1" fill="currentColor" viewBox="0 0 20 20">
                        <path d="M9.049 2.927c.3-.921 1.603-.921 1.902 0l1.07 3.292a1 1 0 00.95.69h3.462c.969 0 1.371 1.24.588 1.81l-2.8 2.034a1 1 0 00-.364 1.118l1.07 3.292c.3.921-.755 1.688-1.54 1.118l-2.8-2.034a1 1 0 00-1.175 0l-2.8 2.034c-.784.57-1.838-.197-1.539-1.118l1.07-3.292a1 1 0 00-.364-1.118L2.98 8.72c-.783-.57-.38-1.81.588-1.81h3.461a1 1 0 00.951-.69l1.07-3.292z" />
                      </svg>
                      <span class="text-sm font-medium text-neutral-700">{tool.fields['Rating (Sao)']}</span>
                    </div>
                  )}
                </div>

                <div class="p-6">
                  <h3 class="text-xl font-bold text-neutral-900 mb-2">
                    {tool.fields['Tên công cụ (EN)']}
                  </h3>

                  <p class="text-neutral-600 text-sm mb-4 line-clamp-2">
                    {tool.fields['Mô tả ngắn gọn (EN)']}
                  </p>

                  <div class="mb-4">
                    <span class="text-sm text-neutral-500">
                      {tool.fields['Danh mục'] && tool.fields['Danh mục'][0]}
                    </span>
                  </div>

                  <div class="flex flex-wrap gap-2 mb-4">
                    {tool.fields['Danh mục'] && tool.fields['Danh mục'].slice(0, 2).map((tag) => (
                      <span class="bg-neutral-100 text-neutral-700 text-xs px-2 py-1 rounded">
                        {tag}
                      </span>
                    ))}
                  </div>

                  <a 
                    href={tool.fields['Link Affiliate']} 
                    target="_blank" 
                    rel="noopener noreferrer"
                    class="w-full inline-flex items-center justify-center bg-primary-600 hover:bg-primary-700 text-white px-4 py-3 rounded-lg font-semibold transition-colors"
                  >
                    Try Now
                    <svg class="w-4 h-4 ml-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 6H6a2 2 0 00-2 2v10a2 2 0 002 2h10a2 2 0 002-2v-4M14 4h6m0 0v6m0-6L10 14"></path>
                    </svg>
                  </a>
                </div>
              </div>
            ))}
          </div>
        </div>
      ))}
    </div>
  </section>
</Layout>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    const searchInput = document.getElementById('search-input');
    const sortSelect = document.getElementById('sort-select');
    const categoryDropdownBtn = document.getElementById('category-dropdown-btn');
    const categoryDropdown = document.getElementById('category-dropdown');
    const selectedCategorySpan = document.getElementById('selected-category');
    const categoryOptions = document.querySelectorAll('.category-option');
    const allToolsView = document.getElementById('all-tools-view');
    const categoryViews = document.querySelectorAll('.category-view');
    const allTools = document.querySelectorAll('.ai-tool');
    
    let currentCategory = 'all';
    let currentSearch = '';

    // Toggle dropdown
    categoryDropdownBtn?.addEventListener('click', () => {
      categoryDropdown?.classList.toggle('hidden');
    });

    // Close dropdown when clicking outside
    document.addEventListener('click', (e) => {
      if (!categoryDropdownBtn?.contains(e.target) && !categoryDropdown?.contains(e.target)) {
        categoryDropdown?.classList.add('hidden');
      }
    });

    // Category selection
    categoryOptions.forEach(option => {
      option.addEventListener('click', () => {
        const category = option.dataset.category;
        const categoryText = option.textContent.trim();
        
        selectedCategorySpan.textContent = categoryText;
        currentCategory = category;
        categoryDropdown?.classList.add('hidden');
        
        showCategoryView(category);
      });
    });

    // Search functionality
    searchInput?.addEventListener('input', (e) => {
      currentSearch = e.target.value.toLowerCase();
      filterTools();
    });

    // Sort functionality
    sortSelect?.addEventListener('change', (e) => {
      const sortValue = e.target.value;
      sortTools(sortValue);
    });

    function showCategoryView(category) {
      // Hide all views
      allToolsView?.classList.add('hidden');
      categoryViews.forEach(view => view.classList.add('hidden'));
      
      if (category === 'all') {
        allToolsView?.classList.remove('hidden');
      } else {
        const categoryView = document.getElementById(`category-${category.replace(/\s+/g, '-').toLowerCase()}`);
        categoryView?.classList.remove('hidden');
      }
      
      filterTools();
    }

    function filterTools() {
      const toolsToFilter = currentCategory === 'all' 
        ? allToolsView?.querySelectorAll('.ai-tool')
        : document.getElementById(`category-${currentCategory.replace(/\s+/g, '-').toLowerCase()}`)?.querySelectorAll('.ai-tool');
      
      if (!toolsToFilter) return;
      
      toolsToFilter.forEach(tool => {
        const name = tool.dataset.name?.toLowerCase() || '';
        const description = tool.querySelector('p')?.textContent?.toLowerCase() || '';
        
        const matchesSearch = !currentSearch || 
          name.includes(currentSearch) || 
          description.includes(currentSearch);
        
        if (matchesSearch) {
          tool.style.display = 'block';
        } else {
          tool.style.display = 'none';
        }
      });
    }

    function sortTools(sortValue) {
      const container = currentCategory === 'all' 
        ? allToolsView?.querySelector('.grid')
        : document.getElementById(`category-${currentCategory.replace(/\s+/g, '-').toLowerCase()}`)?.querySelector('.grid');
      
      if (!container) return;
      
      const tools = Array.from(container.querySelectorAll('.ai-tool'));
      
      tools.sort((a, b) => {
        switch (sortValue) {
          case 'name':
            return (a.dataset.name || '').localeCompare(b.dataset.name || '');
          case 'rating':
            return parseFloat(b.dataset.rating || '0') - parseFloat(a.dataset.rating || '0');
          case 'popular':
            return (b.dataset.popular === 'true' ? 1 : 0) - (a.dataset.popular === 'true' ? 1 : 0);
          default:
            return 0;
        }
      });
      
      tools.forEach(tool => container.appendChild(tool));
    }

    // Initialize
    showCategoryView('all');
  });
</script>

<style>
  .line-clamp-2 {
    display: -webkit-box;
    -webkit-line-clamp: 2;
    -webkit-box-orient: vertical;
    overflow: hidden;
  }
</style>